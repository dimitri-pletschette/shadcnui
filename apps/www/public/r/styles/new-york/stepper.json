{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot",
    "@stepperize/react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/stepper.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport * as Stepperize from \"@stepperize/react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\n\ntype StepperProviderProps<T extends Stepperize.Step[]> = StepperConfig<T> & {\n  children: React.ReactNode\n}\n\ntype StepperVariant = \"horizontal\" | \"vertical\" | \"circle\"\ntype StepperLabelOrientation = \"horizontal\" | \"vertical\"\n\ntype StepperConfig<T extends Stepperize.Step[]> = {\n  instance: ReturnType<typeof Stepperize.defineStepper<T>>\n  variant?: StepperVariant\n  labelOrientation?: StepperLabelOrientation\n  tracking?: boolean\n}\n\nconst StepContext = React.createContext<StepperConfig<any>>({\n  instance: {} as ReturnType<typeof Stepperize.defineStepper<any>>,\n  variant: \"horizontal\",\n})\n\nconst StepperProvider = <T extends Stepperize.Step[]>({\n  children,\n  ...props\n}: StepperProviderProps<T>) => {\n  const Scope = props.instance.Scoped\n  return (\n    <Scope>\n      <StepContext.Provider value={props}>{children}</StepContext.Provider>\n    </Scope>\n  )\n}\n\nconst useStepper = <T extends Stepperize.Step[]>(): StepperConfig<T> => {\n  const context = React.useContext(StepContext)\n  if (!context) {\n    throw new Error(\"useStepper must be used within a Stepper\")\n  }\n  return context\n}\n\nfunction Stepper<T extends Stepperize.Step[]>({\n  children,\n  variant = \"horizontal\",\n  className,\n  labelOrientation = \"horizontal\",\n  tracking = false,\n  ...props\n}: StepperConfig<T> &\n  Omit<React.ComponentProps<\"div\">, \"children\"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<T> }) => React.ReactNode)\n  }) {\n  const { instance } = props\n\n  const methods = instance.useStepper() as Stepperize.Stepper<T>\n\n  return (\n    <StepperProvider\n      instance={instance}\n      variant={variant}\n      labelOrientation={labelOrientation}\n      tracking={tracking}\n    >\n      <div className={cn(\"stepper w-full\", className)} {...props}>\n        {typeof children === \"function\" ? children({ methods }) : children}\n      </div>\n    </StepperProvider>\n  )\n}\n\nconst StepperNavigation = ({\n  children,\n  className,\n  \"aria-label\": ariaLabel = \"Stepper Navigation\",\n  ...props\n}: Omit<React.ComponentProps<\"nav\">, \"children\"> & {\n  children: React.ReactNode\n}) => {\n  const { variant, instance } = useStepper()\n\n  const methods = instance.useStepper() as Stepperize.Stepper<Stepperize.Step[]>\n\n  return (\n    <nav\n      aria-label={ariaLabel}\n      role=\"tablist\"\n      className={cn(\"stepper-navigation\", className)}\n      {...props}\n    >\n      <ol className={listVariants({ variant: variant })}>{children}</ol>\n    </nav>\n  )\n}\n\nconst listVariants = cva(\"stepper-navigation-list flex gap-2\", {\n  variants: {\n    variant: {\n      horizontal: \"flex-row items-center justify-between\",\n      vertical: \"flex-col\",\n      circle: \"flex-row items-center justify-between\",\n    },\n  },\n})\n\nconst StepperStep = <T extends Stepperize.Step, Icon extends React.ReactNode>({\n  children,\n  className,\n  of,\n  icon,\n  ...props\n}: React.ComponentProps<\"button\"> & { of: T; icon?: Icon }) => {\n  const id = React.useId()\n  const { instance, variant, labelOrientation } = useStepper()\n\n  const methods = instance.useStepper() as Stepperize.Stepper<Stepperize.Step[]>\n\n  const currentStep = methods.current\n\n  const isLast = instance.utils.getLast().id === of.id\n  const stepIndex = instance.utils.getIndex(of.id)\n  const currentIndex = instance.utils.getIndex(currentStep?.id ?? \"\")\n  const isActive = currentStep?.id === of.id\n\n  const dataState = getStepState(currentIndex, stepIndex)\n  const childMap = useStepChildren(children)\n\n  const title = childMap.get(\"title\")\n  const description = childMap.get(\"description\")\n  const panel = childMap.get(\"panel\")\n\n  if (variant === \"circle\") {\n    return (\n      <li\n        id={id}\n        className={cn(\n          \"stepper-step flex shrink-0 items-center gap-4 rounded-md transition-colors\",\n          className\n        )}\n      >\n        <CircleStepIndicator\n          currentStep={stepIndex + 1}\n          totalSteps={instance.steps.length}\n        />\n        <div className=\"stepper-step-content flex flex-col items-start gap-1\">\n          {title}\n          {description}\n        </div>\n      </li>\n    )\n  }\n\n  return (\n    <>\n      <li\n        id={id}\n        className={cn([\n          \"stepper-step group peer relative flex items-center gap-2\",\n          \"data-[variant=vertical]:flex-row\",\n          \"data-[label-orientation=vertical]:w-full\",\n          \"data-[label-orientation=vertical]:flex-col\",\n          \"data-[label-orientation=vertical]:justify-center\",\n        ])}\n        data-variant={variant}\n        data-label-orientation={labelOrientation}\n        data-state={dataState}\n        data-disabled={props.disabled}\n      >\n        <Button\n          id={`step-${of.id}`}\n          type=\"button\"\n          role=\"tab\"\n          tabIndex={dataState !== \"inactive\" ? 0 : -1}\n          className=\"stepper-step-indicator rounded-full\"\n          variant={dataState !== \"inactive\" ? \"default\" : \"secondary\"}\n          size=\"icon\"\n          aria-controls={`step-panel-${of.id}`}\n          aria-current={isActive ? \"step\" : undefined}\n          aria-posinset={stepIndex + 1}\n          aria-setsize={methods.all.length}\n          aria-selected={isActive}\n          onKeyDown={(e) =>\n            onStepKeyDown(\n              e,\n              instance.utils.getNext(of.id),\n              instance.utils.getPrev(of.id)\n            )\n          }\n          {...props}\n        >\n          {icon ?? stepIndex + 1}\n        </Button>\n        {variant === \"horizontal\" && labelOrientation === \"vertical\" && (\n          <StepperSeparator\n            orientation=\"horizontal\"\n            labelOrientation={labelOrientation}\n            isLast={isLast}\n            state={dataState}\n            disabled={props.disabled}\n          />\n        )}\n        <div className=\"stepper-step-content flex flex-col items-start\">\n          {title}\n          {description}\n        </div>\n      </li>\n\n      {variant === \"horizontal\" && labelOrientation === \"horizontal\" && (\n        <StepperSeparator\n          orientation=\"horizontal\"\n          isLast={isLast}\n          state={dataState}\n          disabled={props.disabled}\n        />\n      )}\n\n      {variant === \"vertical\" && (\n        <div className=\"flex gap-4\">\n          {!isLast && (\n            <div className=\"flex justify-center ps-5\">\n              <StepperSeparator\n                orientation=\"vertical\"\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            </div>\n          )}\n          <div className=\"my-3 flex-1 ps-4\">{panel}</div>\n        </div>\n      )}\n    </>\n  )\n}\n\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean\n  state: string\n  disabled?: boolean\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) return null\n  return (\n    <div\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role=\"none\"\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  )\n}\n\nconst classForSeparator = cva(\n  [\n    \"bg-muted\",\n    \"data-[state=completed]:bg-primary data-[disabled]:opacity-50\",\n    \"transition-all duration-300 ease-in-out\",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: \"h-0.5 flex-1\",\n        vertical: \"h-full w-0.5\",\n      },\n      labelOrientation: {\n        vertical:\n          \"absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0\",\n      },\n    },\n  }\n)\n\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step\n) => {\n  const { key } = e\n  const directions = {\n    next: [\"ArrowRight\", \"ArrowDown\"],\n    prev: [\"ArrowLeft\", \"ArrowUp\"],\n  }\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? \"next\" : \"prev\"\n    const step = direction === \"next\" ? nextStep : prevStep\n\n    if (!step) return\n\n    const stepElement = document.getElementById(`step-${step.id}`)\n    if (!stepElement) return\n\n    const isActive =\n      stepElement.parentElement?.getAttribute(\"data-state\") !== \"inactive\"\n    if (isActive || direction === \"prev\") {\n      stepElement.focus()\n    }\n  }\n}\n\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) return \"active\"\n  if (currentIndex > stepIndex) return \"completed\"\n  return \"inactive\"\n}\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children)\n  const map = new Map<string, React.ReactNode>()\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === StepperTitle) {\n        map.set(\"title\", child)\n      } else if (child.type === StepperDescription) {\n        map.set(\"description\", child)\n      } else if (child.type === StepperPanel) {\n        map.set(\"panel\", child)\n      }\n    }\n  }\n\n  return map\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children])\n}\n\nconst StepperTitle = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"h4\"\n\n  return (\n    <Comp\n      className={cn(\"stepper-step-title text-base font-medium\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst StepperDescription = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"p\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"p\"\n\n  return (\n    <Comp\n      className={cn(\n        \"stepper-step-description text-sm text-muted-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\ntype CircleStepIndicatorProps = {\n  currentStep: number\n  totalSteps: number\n  size?: number\n  strokeWidth?: number\n}\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2\n  const circumference = radius * 2 * Math.PI\n  const fillPercentage = (currentStep / totalSteps) * 100\n  const dashOffset = circumference - (circumference * fillPercentage) / 100\n\n  return (\n    <div\n      role=\"progressbar\"\n      className=\"stepper-step-indicator relative inline-flex items-center justify-center\"\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          className=\"text-muted-foreground\"\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\"text-primary transition-all duration-300 ease-in-out\"\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-sm font-medium\" aria-live=\"polite\">\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nconst StepperPanel = <T extends Stepperize.Step>({\n  children,\n  className,\n  when,\n  asChild,\n  ...props\n}: Omit<React.ComponentProps<\"div\">, \"children\"> & {\n  asChild?: boolean\n  when: T\n  children:\n    | React.ReactNode\n    | ((props: {\n        step: T\n        onBeforeAction: (\n          action: StepAction,\n          callback: (params: {\n            prevStep: Stepperize.Step\n            nextStep: Stepperize.Step\n          }) => Promise<boolean> | boolean\n        ) => void\n      }) => React.ReactNode)\n}) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { instance, tracking } = useStepper()\n\n  const methods = instance.useStepper()\n\n  if (instance.utils.getIndex(when.id) === -1) {\n    throw new Error(`Step ${when.id} does not exist in the stepper instance`)\n  }\n\n  const onBeforeAction = React.useCallback(\n    async (\n      action: StepAction,\n      callback: (params: {\n        prevStep: Stepperize.Step\n        nextStep: Stepperize.Step\n      }) => Promise<boolean> | boolean\n    ) => {\n      const prevStep = methods.current\n      const nextStep =\n        action === \"next\"\n          ? instance.utils.getNext(prevStep.id)\n          : action === \"prev\"\n          ? instance.utils.getPrev(prevStep.id)\n          : instance.utils.getFirst()\n\n      const shouldProceed = await callback({ prevStep, nextStep })\n      if (shouldProceed) {\n        if (action === \"next\") methods.next()\n        if (action === \"prev\") methods.prev()\n        if (action === \"reset\") methods.reset()\n      }\n    },\n    [methods, instance.utils]\n  )\n\n  return (\n    <>\n      {methods.when(when.id, (step) => (\n        <Comp\n          className={cn(\"stepper-panel flex-1\", className)}\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\n          {...props}\n        >\n          {typeof children === \"function\"\n            ? children({ step: step as T, onBeforeAction })\n            : children}\n        </Comp>\n      ))}\n    </>\n  )\n}\n\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: \"smooth\", block: \"center\" })\n  }\n}\n\nconst StepperControls = ({\n  children,\n  asChild,\n  className,\n  ...props\n}: Omit<React.ComponentProps<\"div\">, \"children\"> & {\n  asChild?: boolean\n  children:\n    | React.ReactNode\n    | ((props: {\n        methods: Stepperize.Stepper<Stepperize.Step[]>\n      }) => React.ReactNode)\n}) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { instance } = useStepper()\n\n  const methods = instance.useStepper()\n\n  return (\n    <Comp\n      className={cn(\"stepper-controls flex justify-end gap-4\", className)}\n      {...props}\n    >\n      {typeof children === \"function\" ? children({ methods }) : children}\n    </Comp>\n  )\n}\n\ntype StepAction = \"next\" | \"prev\" | \"reset\"\n\ntype StepperActionProps = {\n  action: StepAction\n  children: React.ReactNode\n  asChild?: boolean\n  onBeforeAction?: ({\n    event,\n    prevStep,\n    nextStep,\n  }: {\n    event: React.MouseEvent<HTMLButtonElement>\n    prevStep: Stepperize.Step\n    nextStep: Stepperize.Step\n  }) => Promise<boolean> | boolean\n  className?: string\n}\n\nconst StepperAction = ({\n  action,\n  children,\n  asChild = false,\n  onBeforeAction,\n  className,\n  disabled,\n  ...props\n}: React.ComponentProps<\"button\"> & StepperActionProps) => {\n  const { instance } = useStepper()\n  const methods = instance.useStepper()\n\n  const currentStep = methods.current\n\n  const isDisabled = (action: StepAction) =>\n    action === \"prev\" && methods.isFirst\n\n  const actionMap = React.useMemo(\n    () => ({\n      next: methods.next,\n      prev: methods.prev,\n      reset: methods.reset,\n    }),\n    [methods]\n  )\n\n  const handleClick = React.useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onBeforeAction) {\n        const nextStep =\n          action === \"next\"\n            ? instance.utils.getNext(currentStep.id)\n            : action === \"prev\"\n            ? instance.utils.getPrev(currentStep.id)\n            : instance.utils.getFirst()\n        const shouldProceed = await onBeforeAction({\n          event,\n          prevStep: currentStep,\n          nextStep,\n        })\n        if (!shouldProceed) {\n          return\n        }\n      }\n\n      actionMap[action]?.()\n    },\n    [onBeforeAction, actionMap, action, instance.utils, currentStep]\n  )\n\n  const Comp = asChild ? Slot : Button\n\n  if (\n    (methods.isLast && (action === \"next\" || action === \"prev\")) ||\n    (!methods.isLast && action === \"reset\")\n  ) {\n    return null\n  }\n\n  return (\n    <Comp\n      onClick={handleClick}\n      variant={action === \"prev\" ? \"secondary\" : \"default\"}\n      disabled={isDisabled(action) || disabled}\n      className={cn(\"stepper-action\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst defineStepper: typeof Stepperize.defineStepper = Stepperize.defineStepper\n\nexport {\n  Stepper,\n  StepperAction,\n  StepperControls,\n  StepperDescription,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n  defineStepper,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}