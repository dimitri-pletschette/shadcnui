{
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "react-day-picker@8.10.1",
    "date-fns"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { differenceInCalendarDays } from \"date-fns\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport {\n  DayPicker,\n  labelNext,\n  labelPrevious,\n  useDayPicker,\n  type DayPickerProps,\n} from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/registry/default/ui/button\"\n\nexport type CalendarProps = DayPickerProps & {\n  /**\n   * In the year view, the number of years to display at once.\n   * @default 12\n   */\n  yearRange?: number\n\n  monthsClassName?: string\n  monthCaptionClassName?: string\n  weekdaysClassName?: string\n  weekdayClassName?: string\n  monthClassName?: string\n  captionClassName?: string\n  captionLabelClassName?: string\n  buttonNextClassName?: string\n  buttonPreviousClassName?: string\n  navClassName?: string\n  monthGridClassName?: string\n  weekClassName?: string\n  dayClassName?: string\n  dayButtonClassName?: string\n  rangeStartClassName?: string\n  rangeEndClassName?: string\n  selectedClassName?: string\n  todayClassName?: string\n  outsideClassName?: string\n  disabledClassName?: string\n  rangeMiddleClassName?: string\n  hiddenClassName?: string\n}\n\n/**\n * A custom calendar component built on top of react-day-picker.\n * @param props The props for the calendar.\n * @default yearRange 12\n * @returns\n */\nfunction Calendar({\n  className,\n  showOutsideDays = true,\n  yearRange = 12,\n  numberOfMonths,\n  ...props\n}: CalendarProps) {\n  const [navView, setNavView] = React.useState<\"days\" | \"years\">(\"days\")\n  const [displayYears, setDisplayYears] = React.useState<{\n    from: number\n    to: number\n  }>(\n    React.useMemo(() => {\n      const currentYear = new Date().getFullYear()\n      return {\n        from: currentYear - Math.floor(yearRange / 2 - 1),\n        to: currentYear + Math.ceil(yearRange / 2),\n      }\n    }, [yearRange])\n  )\n\n  const { onNextClick, onPrevClick, startMonth, endMonth } = props\n\n  const columnsDisplayed = navView === \"years\" ? 1 : numberOfMonths\n\n  const _monthsClassName = cn(\"relative flex\", props.monthsClassName)\n  const _monthCaptionClassName = cn(\n    \"relative mx-10 flex h-7 items-center justify-center\",\n    props.monthCaptionClassName\n  )\n  const _weekdaysClassName = cn(\"flex flex-row\", props.weekdaysClassName)\n  const _weekdayClassName = cn(\n    \"w-8 text-sm font-normal text-muted-foreground\",\n    props.weekdayClassName\n  )\n  const _monthClassName = cn(\"w-full overflow-x-hidden\", props.monthClassName)\n  const _captionClassName = cn(\n    \"relative flex items-center justify-center pt-1\",\n    props.captionClassName\n  )\n  const _captionLabelClassName = cn(\n    \"truncate text-sm font-medium\",\n    props.captionLabelClassName\n  )\n  const buttonNavClassName = buttonVariants({\n    variant: \"outline\",\n    className:\n      \"absolute h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n  })\n  const _buttonNextClassName = cn(\n    buttonNavClassName,\n    \"right-0\",\n    props.buttonNextClassName\n  )\n  const _buttonPreviousClassName = cn(\n    buttonNavClassName,\n    \"left-0\",\n    props.buttonPreviousClassName\n  )\n  const _navClassName = cn(\"flex items-start\", props.navClassName)\n  const _monthGridClassName = cn(\"mx-auto mt-4\", props.monthGridClassName)\n  const _weekClassName = cn(\"mt-2 flex w-max items-start\", props.weekClassName)\n  const _dayClassName = cn(\n    \"size-8 flex flex-1 items-center justify-center p-0 text-sm\",\n    props.dayClassName\n  )\n  const _dayButtonClassName = cn(\n    buttonVariants({ variant: \"ghost\" }),\n    \"size-8 rounded-md p-0 font-normal transition-none aria-selected:opacity-100\",\n    props.dayButtonClassName\n  )\n  const buttonRangeClassName =\n    \"bg-accent [&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\"\n  const _rangeStartClassName = cn(\n    buttonRangeClassName,\n    \"day-range-start rounded-s-md\",\n    props.rangeStartClassName\n  )\n  const _rangeEndClassName = cn(\n    buttonRangeClassName,\n    \"day-range-end rounded-e-md\",\n    props.rangeEndClassName\n  )\n  const _rangeMiddleClassName = cn(\n    \"bg-accent !text-foreground [&>button]:bg-transparent [&>button]:!text-foreground [&>button]:hover:bg-transparent [&>button]:hover:!text-foreground\",\n    props.rangeMiddleClassName\n  )\n  const _selectedClassName = cn(\n    \"[&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\",\n    props.selectedClassName\n  )\n  const _todayClassName = cn(\n    \"[&>button]:bg-accent [&>button]:text-accent-foreground\",\n    props.todayClassName\n  )\n  const _outsideClassName = cn(\n    \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n    props.outsideClassName\n  )\n  const _disabledClassName = cn(\n    \"text-muted-foreground opacity-50\",\n    props.disabledClassName\n  )\n  const _hiddenClassName = cn(\"invisible hidden\", props.hiddenClassName)\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      style={{\n        width: 248.8 * (columnsDisplayed ?? 1) + \"px\",\n      }}\n      classNames={{\n        months: _monthsClassName,\n        month_caption: _monthCaptionClassName,\n        weekdays: _weekdaysClassName,\n        weekday: _weekdayClassName,\n        month: _monthClassName,\n        caption: _captionClassName,\n        caption_label: _captionLabelClassName,\n        button_next: _buttonNextClassName,\n        button_previous: _buttonPreviousClassName,\n        nav: _navClassName,\n        month_grid: _monthGridClassName,\n        week: _weekClassName,\n        day: _dayClassName,\n        day_button: _dayButtonClassName,\n        range_start: _rangeStartClassName,\n        range_middle: _rangeMiddleClassName,\n        range_end: _rangeEndClassName,\n        selected: _selectedClassName,\n        today: _todayClassName,\n        outside: _outsideClassName,\n        disabled: _disabledClassName,\n        hidden: _hiddenClassName,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          const Icon = orientation === \"left\" ? ChevronLeft : ChevronRight\n          return <Icon className=\"h-4 w-4\" />\n        },\n        Nav: ({ className, children, ...props }) => {\n          const { nextMonth, previousMonth, goToMonth } = useDayPicker()\n\n          const isPreviousDisabled = (() => {\n            if (navView === \"years\") {\n              return (\n                (startMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.from - 1, 0, 1),\n                    startMonth\n                  ) < 0) ||\n                (endMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.from - 1, 0, 1),\n                    endMonth\n                  ) > 0)\n              )\n            }\n            return !previousMonth\n          })()\n\n          const isNextDisabled = (() => {\n            if (navView === \"years\") {\n              return (\n                (startMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.to + 1, 0, 1),\n                    startMonth\n                  ) < 0) ||\n                (endMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.to + 1, 0, 1),\n                    endMonth\n                  ) > 0)\n              )\n            }\n            return !nextMonth\n          })()\n\n          const handlePreviousClick = React.useCallback(() => {\n            if (!previousMonth) return\n            if (navView === \"years\") {\n              setDisplayYears((prev) => ({\n                from: prev.from - (prev.to - prev.from + 1),\n                to: prev.to - (prev.to - prev.from + 1),\n              }))\n              onPrevClick?.(\n                new Date(\n                  displayYears.from - (displayYears.to - displayYears.from),\n                  0,\n                  1\n                )\n              )\n              return\n            }\n            goToMonth(previousMonth)\n            onPrevClick?.(previousMonth)\n          }, [previousMonth, goToMonth])\n\n          const handleNextClick = React.useCallback(() => {\n            if (!nextMonth) return\n            if (navView === \"years\") {\n              setDisplayYears((prev) => ({\n                from: prev.from + (prev.to - prev.from + 1),\n                to: prev.to + (prev.to - prev.from + 1),\n              }))\n              onNextClick?.(\n                new Date(\n                  displayYears.from + (displayYears.to - displayYears.from),\n                  0,\n                  1\n                )\n              )\n              return\n            }\n            goToMonth(nextMonth)\n            onNextClick?.(nextMonth)\n          }, [goToMonth, nextMonth])\n          return (\n            <nav className={cn(\"flex items-center\", className)} {...props}>\n              <Button\n                variant=\"outline\"\n                className=\"absolute left-0 h-7 w-7 bg-transparent p-0 opacity-80 hover:opacity-100\"\n                type=\"button\"\n                tabIndex={isPreviousDisabled ? undefined : -1}\n                disabled={isPreviousDisabled}\n                aria-label={\n                  navView === \"years\"\n                    ? `Go to the previous ${\n                        displayYears.to - displayYears.from + 1\n                      } years`\n                    : labelPrevious(previousMonth)\n                }\n                onClick={handlePreviousClick}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"absolute right-0 h-7 w-7 bg-transparent p-0 opacity-80 hover:opacity-100\"\n                type=\"button\"\n                tabIndex={isNextDisabled ? undefined : -1}\n                disabled={isNextDisabled}\n                aria-label={\n                  navView === \"years\"\n                    ? `Go to the next ${\n                        displayYears.to - displayYears.from + 1\n                      } years`\n                    : labelNext(nextMonth)\n                }\n                onClick={handleNextClick}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </nav>\n          )\n        },\n        CaptionLabel: ({ children }) => (\n          <Button\n            className=\"h-7 w-full truncate text-sm font-medium\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() =>\n              setNavView((prev) => (prev === \"days\" ? \"years\" : \"days\"))\n            }\n          >\n            {navView === \"days\"\n              ? children\n              : displayYears.from + \" - \" + displayYears.to}\n          </Button>\n        ),\n        MonthGrid: ({ className, children, ...props }) => {\n          const { goToMonth } = useDayPicker()\n          if (navView === \"years\") {\n            return (\n              <div\n                className={cn(\"grid grid-cols-4 gap-y-2\", className)}\n                {...props}\n              >\n                {Array.from(\n                  { length: displayYears.to - displayYears.from + 1 },\n                  (_, i) => {\n                    const isBefore =\n                      differenceInCalendarDays(\n                        new Date(displayYears.from + i, 11, 31),\n                        startMonth!\n                      ) < 0\n\n                    const isAfter =\n                      differenceInCalendarDays(\n                        new Date(displayYears.from + i, 0, 0),\n                        endMonth!\n                      ) > 0\n\n                    const isDisabled = isBefore || isAfter\n                    return (\n                      <Button\n                        key={i}\n                        className={cn(\n                          \"h-7 w-full text-sm font-normal text-foreground\",\n                          displayYears.from + i === new Date().getFullYear() &&\n                            \"bg-accent font-medium text-accent-foreground\"\n                        )}\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setNavView(\"days\")\n                          goToMonth(\n                            new Date(\n                              displayYears.from + i,\n                              new Date().getMonth()\n                            )\n                          )\n                        }}\n                        disabled={navView === \"years\" ? isDisabled : undefined}\n                      >\n                        {displayYears.from + i}\n                      </Button>\n                    )\n                  }\n                )}\n              </div>\n            )\n          }\n          return (\n            <table className={className} {...props}>\n              {children}\n            </table>\n          )\n        },\n      }}\n      numberOfMonths={columnsDisplayed}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}