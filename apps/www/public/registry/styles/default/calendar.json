{
  "name": "calendar",
  "dependencies": [
    "react-day-picker@8.10.1",
    "date-fns"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { differenceInCalendarDays } from \"date-fns\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport {\n  DayPicker,\n  labelNext,\n  labelPrevious,\n  useDayPicker,\n} from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/registry/default/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker> & {\n  /**\n   * In the year view, the number of years to display at once.\n   * @default 12\n   */\n  yearRange?: number\n  /**\n   * Wether to let user switch between months and years view.\n   * @default false\n   */\n  showYearSwitcher?: boolean\n}\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  yearRange = 12,\n  showYearSwitcher = false,\n  numberOfMonths,\n  ...props\n}: CalendarProps) {\n  const [navView, setNavView] = React.useState<\"days\" | \"years\">(\"days\")\n  const [displayYears, setDisplayYears] = React.useState<{\n    from: number\n    to: number\n  }>(\n    React.useMemo(() => {\n      const currentYear = new Date().getFullYear()\n      return {\n        from: currentYear - Math.floor(yearRange / 2 - 1),\n        to: currentYear + Math.ceil(yearRange / 2),\n      }\n    }, [yearRange])\n  )\n\n  const { onNextClick, onPrevClick, startMonth, endMonth } = props\n\n  const columnsDisplayed = navView === \"years\" ? 1 : numberOfMonths\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      style={{\n        width: 248.8 * (columnsDisplayed ?? 1) + \"px\",\n      }}\n      classNames={{\n        months: \"relative flex flex-col gap-y-4 sm:flex-row sm:gap-y-0\",\n        month_caption: \"relative mx-10 flex h-7 items-center justify-center\",\n        weekdays: \"flex flex-row\",\n        weekday: \"w-8 text-[0.8rem] font-normal text-muted-foreground\",\n        month: \"w-full gap-y-4 overflow-x-hidden\",\n        caption: \"relative flex items-center justify-center pt-1\",\n        caption_label: \"truncate text-sm font-medium\",\n        button_next: cn(\n          buttonVariants({\n            variant: \"outline\",\n            className:\n              \"absolute right-0 h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n          })\n        ),\n        button_previous: cn(\n          buttonVariants({\n            variant: \"outline\",\n            className:\n              \"absolute left-0 h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n          })\n        ),\n        nav: \"flex items-start\",\n        month_grid: \"mt-4\",\n        week: \"mt-2 flex w-full\",\n        day: \"flex size-8 flex-1 items-center justify-center rounded-md p-0 text-sm [&:has(button)]:hover:!bg-accent [&:has(button)]:hover:text-accent-foreground [&:has(button)]:hover:aria-selected:!bg-primary [&:has(button)]:hover:aria-selected:text-primary-foreground\",\n        day_button: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal transition-none hover:bg-transparent hover:text-inherit aria-selected:opacity-100\"\n        ),\n        range_start: \"day-range-start rounded-s-md\",\n        range_end: \"day-range-end rounded-e-md\",\n        selected:\n          \"bg-primary text-primary-foreground hover:!bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        today: \"bg-accent text-accent-foreground\",\n        outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        disabled: \"text-muted-foreground opacity-50\",\n        range_middle:\n          \"rounded-none aria-selected:bg-accent aria-selected:text-accent-foreground hover:aria-selected:!bg-accent hover:aria-selected:text-accent-foreground\",\n        hidden: \"invisible hidden\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          const Icon = orientation === \"left\" ? ChevronLeft : ChevronRight\n          return <Icon className=\"h-4 w-4\" />\n        },\n        Nav: ({ className, children, ...props }) => {\n          const { nextMonth, previousMonth, goToMonth } = useDayPicker()\n\n          const isPreviousDisabled = (() => {\n            if (navView === \"years\") {\n              return (\n                (startMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.from - 1, 0, 1),\n                    startMonth\n                  ) < 0) ||\n                (endMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.from - 1, 0, 1),\n                    endMonth\n                  ) > 0)\n              )\n            }\n            return !previousMonth\n          })()\n\n          const isNextDisabled = (() => {\n            if (navView === \"years\") {\n              return (\n                (startMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.to + 1, 0, 1),\n                    startMonth\n                  ) < 0) ||\n                (endMonth &&\n                  differenceInCalendarDays(\n                    new Date(displayYears.to + 1, 0, 1),\n                    endMonth\n                  ) > 0)\n              )\n            }\n            return !nextMonth\n          })()\n\n          const handlePreviousClick = React.useCallback(() => {\n            if (!previousMonth) return\n            if (navView === \"years\") {\n              setDisplayYears((prev) => ({\n                from: prev.from - (prev.to - prev.from + 1),\n                to: prev.to - (prev.to - prev.from + 1),\n              }))\n              onPrevClick?.(\n                new Date(\n                  displayYears.from - (displayYears.to - displayYears.from),\n                  0,\n                  1\n                )\n              )\n              return\n            }\n            goToMonth(previousMonth)\n            onPrevClick?.(previousMonth)\n          }, [previousMonth, goToMonth])\n\n          const handleNextClick = React.useCallback(() => {\n            if (!nextMonth) return\n            if (navView === \"years\") {\n              setDisplayYears((prev) => ({\n                from: prev.from + (prev.to - prev.from + 1),\n                to: prev.to + (prev.to - prev.from + 1),\n              }))\n              onNextClick?.(\n                new Date(\n                  displayYears.from + (displayYears.to - displayYears.from),\n                  0,\n                  1\n                )\n              )\n              return\n            }\n            goToMonth(nextMonth)\n            onNextClick?.(nextMonth)\n          }, [goToMonth, nextMonth])\n          return (\n            <nav className={cn(\"flex items-center\", className)} {...props}>\n              <Button\n                variant=\"outline\"\n                className=\"absolute left-0 h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n                type=\"button\"\n                tabIndex={isPreviousDisabled ? undefined : -1}\n                disabled={isPreviousDisabled}\n                aria-label={\n                  navView === \"years\"\n                    ? `Go to the previous ${\n                        displayYears.to - displayYears.from + 1\n                      } years`\n                    : labelPrevious(previousMonth)\n                }\n                onClick={handlePreviousClick}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"absolute right-0 h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n                type=\"button\"\n                tabIndex={isNextDisabled ? undefined : -1}\n                disabled={isNextDisabled}\n                aria-label={\n                  navView === \"years\"\n                    ? `Go to the next ${\n                        displayYears.to - displayYears.from + 1\n                      } years`\n                    : labelNext(nextMonth)\n                }\n                onClick={handleNextClick}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </nav>\n          )\n        },\n        CaptionLabel: ({ children, ...props }) => {\n          if (!showYearSwitcher) return <span {...props}>{children}</span>\n\n          return (\n            <Button\n              className=\"h-7 w-full truncate text-sm font-medium\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() =>\n                setNavView((prev) => (prev === \"days\" ? \"years\" : \"days\"))\n              }\n            >\n              {navView === \"days\"\n                ? children\n                : displayYears.from + \" - \" + displayYears.to}\n            </Button>\n          )\n        },\n        MonthGrid: ({ className, children, ...props }) => {\n          const { goToMonth } = useDayPicker()\n          if (navView === \"years\") {\n            return (\n              <div\n                className={cn(\"grid grid-cols-4 gap-y-2\", className)}\n                {...props}\n              >\n                {Array.from(\n                  { length: displayYears.to - displayYears.from + 1 },\n                  (_, i) => {\n                    const isBefore =\n                      differenceInCalendarDays(\n                        new Date(displayYears.from + i, 12, 31),\n                        startMonth!\n                      ) < 0\n\n                    const isAfter =\n                      differenceInCalendarDays(\n                        new Date(displayYears.from + i, 0, 0),\n                        endMonth!\n                      ) > 0\n\n                    const isDisabled = isBefore || isAfter\n                    return (\n                      <Button\n                        key={i}\n                        className={cn(\n                          \"h-7 w-full\",\n                          displayYears.from + i === new Date().getFullYear() &&\n                            \"bg-accent text-accent-foreground\"\n                        )}\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setNavView(\"days\")\n                          goToMonth(\n                            new Date(\n                              displayYears.from + i,\n                              new Date().getMonth()\n                            )\n                          )\n                        }}\n                        disabled={navView === \"years\" ? isDisabled : undefined}\n                      >\n                        {displayYears.from + i}\n                      </Button>\n                    )\n                  }\n                )}\n              </div>\n            )\n          }\n          return (\n            <table className={className} {...props}>\n              {children}\n            </table>\n          )\n        },\n      }}\n      numberOfMonths={\n        // we need to override the number of months if we are in years view to 1\n        columnsDisplayed\n      }\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
    }
  ],
  "type": "components:ui"
}